generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  passwordHash        String
  role                String               @default("USER")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           Address[]
  cart                Cart?
  orders              Order[]
  passwordResetTokens PasswordResetToken[]
  auctionsSelling     Auction[]            @relation("SellerAuctions")
  bids                Bid[]                @relation("UserBids")
}

model Category {
  id           String             @id @default(uuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  products     Product[]
  translations CategoryLocale[]
}

model CategoryLocale {
  id         String    @id @default(uuid())
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  locale     String
  name       String

  @@unique([categoryId, locale])
}

model Product {
  id           String              @id @default(uuid())
  price        Float
  categoryId   String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  salePrice    Float?
  isFeatured   Boolean             @default(false)
  stock        Int                 @default(0)
  imageUrl     String?
  category     Category?           @relation(fields: [categoryId], references: [id])
  cartItems    CartItem[]
  orderItems   OrderItem[]
  translations ProductLocale[]
  auctions     Auction[]           @relation("ProductAuctions")
}

model ProductLocale {
  id          String    @id @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  locale      String
  name        String
  description String?

  @@unique([productId, locale])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  status        String      @default("PENDING")
  totalAmount   Float
  paymentMethod String?
  couponId      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  slipUrl       String?
  city          String
  country       String
  line1         String
  line2         String?
  postalCode    String?
  recipient     String
  line3         String?
  coupon        Coupon?     @relation(fields: [couponId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id              String  @id @default(uuid())
  orderId         String
  productId       String
  quantity        Int
  priceAtPurchase Float
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
}

model Coupon {
  id            String           @id @default(uuid())
  code          String           @unique
  discountType  String
  discountValue Float
  usageLimit    Int?
  usedCount     Int              @default(0)
  expiresAt     DateTime?
  translations  CouponLocale[]
  orders        Order[]
}

model CouponLocale {
  id          String  @id @default(uuid())
  coupon      Coupon  @relation(fields: [couponId], references: [id])
  couponId    String
  locale      String
  title       String
  description String?

  @@unique([couponId, locale])
}

model Address {
  id         String  @id @default(uuid())
  userId     String
  recipient  String
  line1      String
  line2      String?
  city       String
  postalCode String
  country    String
  user       User    @relation(fields: [userId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  entity      String
  entityId    String
  performedBy String
  timestamp   DateTime @default(now())
}

model Faq {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  translations FaqLocale[]
}

model FaqLocale {
  id       String @id @default(uuid())
  faq      Faq    @relation(fields: [faqId], references: [id])
  faqId    String
  locale   String
  question String
  answer   String?

  @@unique([faqId, locale])
}

model Banner {
  id           String           @id @default(uuid())
  imageUrl     String
  position     String           @default("hero")
  order        Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  translations BannerLocale[]
}

model BannerLocale {
  id          String  @id @default(uuid())
  banner      Banner  @relation(fields: [bannerId], references: [id])
  bannerId    String
  locale      String
  title       String?
  sub         String?
  description String?

  @@unique([bannerId, locale])
}

model SubBanner {
  id           String              @id @default(uuid())
  buttonLink   String
  imageUrl     String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  translations SubBannerLocale[]
}

model SubBannerLocale {
  id          String     @id @default(uuid())
  subBanner   SubBanner  @relation(fields: [subBannerId], references: [id])
  subBannerId String
  locale      String
  title       String
  description String
  buttonText  String

  @@unique([subBannerId, locale])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Supplier {
  id          String   @id @default(uuid())
  companyName String
  productName String
  stock       Int      @default(0)
  unitPrice   Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum AuctionStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELED
}

model Auction {
  id            String         @id @default(uuid())
  productId     String
  sellerId      String
  winnerBidId   String?         @unique
  title         String
  description   String?
  startPrice    Int
  currentPrice  Int             @default(0)
  bidIncrement  Int             @default(10)
  startAt       DateTime
  endAt         DateTime
  status        AuctionStatus   @default(SCHEDULED)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  product       Product         @relation("ProductAuctions", fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  seller        User            @relation("SellerAuctions", fields: [sellerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  bids          Bid[]
  winnerBid     Bid?            @relation("WinnerBid", fields: [winnerBidId], references: [id])

  @@index([status, endAt])
  @@index([productId])
  @@index([sellerId])
}

model Bid {
  id         String   @id @default(uuid())
  auctionId  String
  userId     String
  amount     Int
  createdAt  DateTime @default(now())
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bidder     User     @relation("UserBids", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  winningFor Auction? @relation("WinnerBid")

  @@index([auctionId, amount])
}
